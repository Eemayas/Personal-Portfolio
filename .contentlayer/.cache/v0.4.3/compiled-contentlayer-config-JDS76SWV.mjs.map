{
  "version": 3,
  "sources": ["../../../data/siteMetadata.js", "../../../contentlayer.config.ts"],
  "sourcesContent": ["/** @type {import(\"pliny/config\").PlinyConfig } */\nconst siteMetadata = {\n  title: \"Prashant | Protfoilo\",\n  author: \"Prashant Manandhar\",\n  headerTitle: \"Prashant | Protfoilo\",\n  description: \"Personal Portfoilo of Prashant Manandhar\",\n  language: \"en-us\",\n  theme: \"system\", // system, dark or light\n  siteUrl: \"https://eemayas.vercel.app/\",\n  siteRepo: \"https://github.com/Eemayas/Personal-Portfolio\",\n  siteLogo: \"/assets/Favicon/apple-touch-icon.png\",\n  socialBanner: \"/static/images/twitter-card.png\",\n  mastodon: \"https://mastodon.social/@mastodonuser\",\n  email: \"prashantmanandhar2002@gmail.com \",\n  github: \"https://github.com/Eemayas\",\n  x: \"https://x.com/PrashantManand8\",\n  facebook: \"https://www.facebook.com/prashant.manandhar.88/\",\n  youtube: \"https://www.youtube.com/channel/UC48ObF2A5sOK02kZWwZ4PEQ\",\n  linkedin: \"https://www.linkedin.com/in/prashant-manandhar/\",\n  threads: \"https://www.threads.net/@prashant__manandhar\",\n  instagram: \"https://www.instagram.com/prashant__manandhar/\",\n  locale: \"en-US\",\n  // analytics: {\n  //   umamiAnalytics: {\n  //     umamiWebsiteId: process.env.NEXT_UMAMI_ID, // e.g. 123e4567-e89b-12d3-a456-426614174000\n  //   },\n  // },\n  // newsletter: {\n  //   provider: \"buttondown\",\n  // },\n  // comments: {\n  //   provider: \"giscus\", // supported providers: giscus, utterances, disqus\n  //   giscusConfig: {\n  //     repo: process.env.NEXT_PUBLIC_GISCUS_REPO,\n  //     repositoryId: process.env.NEXT_PUBLIC_GISCUS_REPOSITORY_ID,\n  //     category: process.env.NEXT_PUBLIC_GISCUS_CATEGORY,\n  //     categoryId: process.env.NEXT_PUBLIC_GISCUS_CATEGORY_ID,\n  //     mapping: \"pathname\", // supported options: pathname, url, title\n  //     reactions: \"1\", // Emoji reactions: 1 = enable / 0 = disable\n  //     metadata: \"0\",\n  //     theme: \"light\",\n  //     // theme when dark mode\n  //     darkTheme: \"transparent_dark\",\n  //     themeURL: \"\",\n  //     lang: \"en\",\n  //   },\n  // },\n  // search: {\n  //   provider: \"kbar\", // kbar or algolia\n  //   kbarConfig: {\n  //     searchDocumentsPath: \"search.json\", // path to load documents to search\n  //   },\n  // },\n};\n\nmodule.exports = siteMetadata;\n", "import {\n  defineDocumentType,\n  ComputedFields,\n  makeSource,\n} from \"contentlayer2/source-files\";\nimport { writeFileSync } from \"fs\";\nimport readingTime from \"reading-time\";\nimport { slug } from \"github-slugger\";\nimport path from \"path\";\nimport { fromHtmlIsomorphic } from \"hast-util-from-html-isomorphic\";\n// Remark packages\nimport remarkGfm from \"remark-gfm\";\nimport remarkMath from \"remark-math\";\nimport {\n  remarkExtractFrontmatter,\n  remarkCodeTitles,\n  remarkImgToJsx,\n  extractTocHeadings,\n} from \"pliny/mdx-plugins/index.js\";\n// Rehype packages\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypeKatex from \"rehype-katex\";\nimport rehypeCitation from \"rehype-citation\";\nimport rehypePrismPlus from \"rehype-prism-plus\";\nimport rehypePresetMinify from \"rehype-preset-minify\";\nimport siteMetadata from \"./data/siteMetadata\";\nimport { allCoreContent, sortPosts } from \"pliny/utils/contentlayer.js\";\n\nconst root = process.cwd();\nconst isProduction = process.env.NODE_ENV === \"production\";\n\n// heroicon mini link\nconst icon = fromHtmlIsomorphic(\n  `\n  <span class=\"content-header-link\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"w-5 h-5 linkicon\">\n  <path d=\"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z\" />\n  <path d=\"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z\" />\n  </svg>\n  </span>\n`,\n  { fragment: true }\n);\n\nconst computedFields: ComputedFields = {\n  readingTime: { type: \"json\", resolve: (doc) => readingTime(doc.body.raw) },\n  slug: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, \"\"),\n  },\n  path: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath,\n  },\n  filePath: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.sourceFilePath,\n  },\n  toc: { type: \"string\", resolve: (doc) => extractTocHeadings(doc.body.raw) },\n};\n\n/**\n * Count the occurrences of all tags across blog posts and write to json file\n */\nfunction createTagCount(allBlogs) {\n  const tagCount: Record<string, number> = {};\n  allBlogs.forEach((file) => {\n    if (file.tags && (!isProduction || file.draft !== true)) {\n      file.tags.forEach((tag) => {\n        const formattedTag = slug(tag);\n        if (formattedTag in tagCount) {\n          tagCount[formattedTag] += 1;\n        } else {\n          tagCount[formattedTag] = 1;\n        }\n      });\n    }\n  });\n  writeFileSync(\"./app/tag-data.json\", JSON.stringify(tagCount));\n}\n\nfunction createSearchIndex(allBlogs) {\n  if (\n    siteMetadata?.search?.provider === \"kbar\" &&\n    siteMetadata.search.kbarConfig.searchDocumentsPath\n  ) {\n    writeFileSync(\n      `public/${siteMetadata.search.kbarConfig.searchDocumentsPath}`,\n      JSON.stringify(allCoreContent(sortPosts(allBlogs)))\n    );\n    console.log(\"Local search index generated...\");\n  }\n}\n\n// export const Blog = defineDocumentType(() => ({\n//   name: \"Blog\",\n//   filePathPattern: \"blog/**/*.mdx\",\n//   contentType: \"mdx\",\n//   fields: {\n//     title: { type: \"string\", required: true },\n//     date: { type: \"date\", required: true },\n//     tags: { type: \"list\", of: { type: \"string\" }, default: [] },\n//     lastmod: { type: \"date\" },\n//     draft: { type: \"boolean\" },\n//     summary: { type: \"string\" },\n//     images: { type: \"json\" },\n//     authors: { type: \"list\", of: { type: \"string\" } },\n//     layout: { type: \"string\" },\n//     bibliography: { type: \"string\" },\n//     canonicalUrl: { type: \"string\" },\n//   },\n//   computedFields: {\n//     ...computedFields,\n//     structuredData: {\n//       type: \"json\",\n//       resolve: (doc) => ({\n//         \"@context\": \"https://schema.org\",\n//         \"@type\": \"BlogPosting\",\n//         headline: doc.title,\n//         datePublished: doc.date,\n//         dateModified: doc.lastmod || doc.date,\n//         description: doc.summary,\n//         image: doc.images ? doc.images[0] : siteMetadata.socialBanner,\n//         url: `${siteMetadata.siteUrl}/${doc._raw.flattenedPath}`,\n//       }),\n//     },\n//   },\n// }));\n\n// export const Authors = defineDocumentType(() => ({\n//   name: \"Authors\",\n//   filePathPattern: \"authors/**/*.mdx\",\n//   contentType: \"mdx\",\n//   fields: {\n//     name: { type: \"string\", required: true },\n//     avatar: { type: \"string\" },\n//     occupation: { type: \"string\" },\n//     company: { type: \"string\" },\n//     email: { type: \"string\" },\n//     twitter: { type: \"string\" },\n//     linkedin: { type: \"string\" },\n//     github: { type: \"string\" },\n//     layout: { type: \"string\" },\n//   },\n//   computedFields,\n// }));\n\n// export default makeSource({\n//   contentDirPath: \"data\",\n//   documentTypes: [Blog, Authors],\n//   mdx: {\n//     cwd: process.cwd(),\n//     remarkPlugins: [\n//       remarkExtractFrontmatter,\n//       remarkGfm,\n//       remarkCodeTitles,\n//       remarkMath,\n//       remarkImgToJsx,\n//     ],\n//     rehypePlugins: [\n//       rehypeSlug,\n//       [\n//         rehypeAutolinkHeadings,\n//         {\n//           behavior: \"prepend\",\n//           headingProperties: {\n//             className: [\"content-header\"],\n//           },\n//           content: icon,\n//         },\n//       ],\n//       rehypeKatex,\n//       [rehypeCitation, { path: path.join(root, \"data\") }],\n//       [rehypePrismPlus, { defaultLanguage: \"js\", ignoreMissing: true }],\n//       rehypePresetMinify,\n//     ],\n//   },\n//   onSuccess: async (importData) => {\n//     const { allBlogs } = await importData();\n//     createTagCount(allBlogs);\n//     createSearchIndex(allBlogs);\n//   },\n// });\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA,QAAMA,gBAAe;AAAA,MACnB,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,aAAa;AAAA,MACb,UAAU;AAAA,MACV,OAAO;AAAA;AAAA,MACP,SAAS;AAAA,MACT,UAAU;AAAA,MACV,UAAU;AAAA,MACV,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,GAAG;AAAA,MACH,UAAU;AAAA,MACV,SAAS;AAAA,MACT,UAAU;AAAA,MACV,SAAS;AAAA,MACT,WAAW;AAAA,MACX,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgCV;AAEA,WAAO,UAAUA;AAAA;AAAA;;;AC7BjB,0BAAyB;AArBzB,SAAS,qBAAqB;AAC9B,OAAO,iBAAiB;AACxB,SAAS,YAAY;AAErB,SAAS,0BAA0B;AAInC;AAAA,EAIE;AAAA,OACK;AASP,SAAS,gBAAgB,iBAAiB;AAE1C,IAAM,OAAO,QAAQ,IAAI;AACzB,IAAM,eAAe,QAAQ,IAAI,aAAa;AAG9C,IAAM,OAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,EAAE,UAAU,KAAK;AACnB;",
  "names": ["siteMetadata"]
}
