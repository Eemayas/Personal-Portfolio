{
  "title": "Time Complexity of Algorithms",
  "date": "2024-06-27T00:00:00.000Z",
  "tags": [
    "Algorithms",
    "Time Complexity",
    "Computational Efficiency",
    "Computer Science"
  ],
  "summary": "This article explores time complexity in algorithms, explaining how it measures the efficiency and performance of different algorithms based on input size.",
  "authors": [
    "default",
    "sparrowhawk"
  ],
  "body": {
    "raw": "\n# Complexity\n\n# Different Data Structure\n\nSure, here is a consolidated table that includes the best case, worst case, and average case time complexities for various operations on different data structures:\n\n| Data Structure             | Operation     | Best Case | Worst Case | Average Case |\n| -------------------------- | ------------- | --------- | ---------- | ------------ |\n| **Array**                  | **Access**    | O(1)      | O(1)       | O(1)         |\n|                            | **Search**    | O(1)      | O(N)       | O(N)         |\n|                            | **Insertion** | O(1)      | O(N)       | O(N)         |\n|                            | **Deletion**  | O(1)      | O(N)       | O(N)         |\n| **Stack**                  | **Access**    | O(1)      | O(N)       | O(N)         |\n|                            | **Search**    | O(1)      | O(N)       | O(N)         |\n|                            | **Insertion** | O(1)      | O(1)       | O(1)         |\n|                            | **Deletion**  | O(1)      | O(1)       | O(1)         |\n| **Queue**                  | **Access**    | O(1)      | O(N)       | O(N)         |\n|                            | **Search**    | O(1)      | O(N)       | O(N)         |\n|                            | **Insertion** | O(1)      | O(1)       | O(1)         |\n|                            | **Deletion**  | O(1)      | O(1)       | O(1)         |\n| **Singly Linked List**     | **Access**    | O(1)      | O(N)       | O(N)         |\n|                            | **Search**    | O(1)      | O(N)       | O(N)         |\n|                            | **Insertion** | O(1)      | O(N)       | O(1)         |\n|                            | **Deletion**  | O(1)      | O(N)       | O(1)         |\n| **Doubly Linked List**     | **Access**    | O(1)      | O(N)       | O(N)         |\n|                            | **Search**    | O(1)      | O(N)       | O(N)         |\n|                            | **Insertion** | O(1)      | O(1)       | O(1)         |\n|                            | **Deletion**  | O(1)      | O(1)       | O(1)         |\n| **Hash Table**             | **Access**    | O(1)      | O(N)       | O(1)         |\n|                            | **Search**    | O(1)      | O(N)       | O(1)         |\n|                            | **Insertion** | O(1)      | O(N)       | O(1)         |\n|                            | **Deletion**  | O(1)      | O(N)       | O(1)         |\n| **Binary **Search** Tree** | **Access**    | O(log N)  | O(N)       | O(log N)     |\n|                            | **Search**    | O(log N)  | O(N)       | O(log N)     |\n|                            | **Insertion** | O(log N)  | O(N)       | O(log N)     |\n|                            | **Deletion**  | O(log N)  | O(N)       | O(log N)     |\n| **AVL Tree**               | **Access**    | O(log N)  | O(log N)   | O(log N)     |\n|                            | **Search**    | O(log N)  | O(log N)   | O(log N)     |\n|                            | **Insertion** | O(log N)  | O(log N)   | O(log N)     |\n|                            | **Deletion**  | O(log N)  | O(log N)   | O(log N)     |\n| **B Tree**                 | **Access**    | O(log N)  | O(log N)   | O(log N)     |\n|                            | **Search**    | O(log N)  | O(log N)   | O(log N)     |\n|                            | **Insertion** | O(log N)  | O(log N)   | O(log N)     |\n|                            | **Deletion**  | O(log N)  | O(log N)   | O(log N)     |\n| **Red Black Tree**         | **Access**    | O(log N)  | O(log N)   | O(log N)     |\n|                            | **Search**    | O(log N)  | O(log N)   | O(log N)     |\n|                            | **Insertion** | O(log N)  | O(log N)   | O(log N)     |\n|                            | **Deletion**  | O(log N)  | O(log N)   | O(log N)     |\n\n# Comparison Sort\n\nSure! Here is a table summarizing the time complexities (best case, average case, and worst case) of various algorithms:\n\n| Algorithm                  | Best Case Time Complexity | Average Case Time Complexity | Worst Case Time Complexity |\n| -------------------------- | ------------------------- | ---------------------------- | -------------------------- |\n| **Selection Sort**         | \\(O(n<sup>2</sup>)\\)      | \\(O(n<sup>2</sup>)\\)         | \\(O(n<sup>2</sup>)\\)       |\n| **Insertion Sort**         | \\(O(n)\\)                  | \\(O(n<sup>2</sup>)\\)         | \\(O(n<sup>2</sup>)\\)       |\n| **Merge Sort**             | \\(O(n log n)\\)            | \\(O(n log n)\\)               | \\(O(n log n)\\)             |\n| **Merge in Merge Sort**    | \\(O(n)\\)                  | \\(O(n)\\)                     | \\(O(n)\\)                   |\n| **Quick Sort**             | \\(O(n log n)\\)            | \\(O(n log n)\\)               | \\(O(n<sup>2</sup>)\\)       |\n| **Partition (Quick Sort)** | \\(O(n)\\)                  | \\(O(n)\\)                     | \\(O(n)\\)                   |\n| **Heap Sort**              | \\(O(n log n)\\)            | \\(O(n log n)\\)               | \\(O(n log n)\\)             |\n| **Build Max Heap**         | \\(O(n)\\)                  | \\(O(n)\\)                     | \\(O(n)\\)                   |\n| **Heapify**                | \\(O(log n)\\)              | \\(O(log n)\\)                 | \\(O(log n)\\)               |\n\n# Greedy algorithms\n\n| Algorithm                        | Best Case Time Complexity          | Average Case Time Complexity              | Worst Case Time Complexity                |\n| -------------------------------- | ---------------------------------- | ----------------------------------------- | ----------------------------------------- |\n| **BFS in Graph**                 | \\(O(V + E)\\)                       | \\(O(V + E)\\)                              | \\(O(V + E)\\)                              |\n| **DFS in Graph**                 | \\(O(V + E)\\)                       | \\(O(V + E)\\)                              | \\(O(V + E)\\)                              |\n| **N-Queen Problem**              | \\(O(N!)\\)                          | \\(O(N!)\\)                                 | \\(O(N!)\\)                                 |\n| **Kruskal’s Algorithm**          | \\(O(E log E)\\)                     | \\(O(E log E)\\)                            | \\(O(E log E)\\)                            |\n| **Prim’s Algorithm**             | \\(O(E log V)\\) (using binary heap) | \\(O(E + V log V)\\) (using Fibonacci heap) | \\(O(E + V log V)\\) (using Fibonacci heap) |\n| **Dijkstra's Algorithm**         | \\(O((E + V) log V)\\) (for sparse ) | \\(O(E + V<sup>2</sup>)\\)                  | \\(O(E + V<sup>2</sup>)\\)                  |\n| **0/1 Knapsack**                 | \\(O(2<sup>n</sup>)\\)               | \\(O(2<sup>n</sup>)\\)                      | \\(O(2<sup>n</sup>)\\)                      |\n| **Fractional Knapsack (greedy)** | \\(O(n log n)\\)                     | \\(O(n log n)\\)                            | \\(O(n log n)\\)                            |\n| **Ford-Fulkerson**               | \\(O(E f)\\)                         | \\(O(E f)\\)                                | \\(O(E f)\\)                                |\n\nHere, \\(n\\) typically denotes the number of elements or size of the input, \\(V\\) denotes the number of vertices in a graph, \\(E\\) denotes the number of edges in a graph and \\(f\\) is the maximum flow value.\n\n# Sorting in linear time\n\nSure! Here are the time complexities for Counting Sort, Radix Sort, and Bucket Sort:\n\n| Algorithm         | Best Case Time Complexity | Average Case Time Complexity | Worst Case Time Complexity |\n| ----------------- | ------------------------- | ---------------------------- | -------------------------- |\n| **Counting Sort** | \\(O(n + k)\\)              | \\(O(n + k)\\)                 | \\(O(n + k)\\)               |\n| **Radix Sort**    | \\(O(nd)\\)                 | \\(O(nd)\\)                    | \\(O(nd)\\)                  |\n| **Bucket Sort**   | \\(O(n + k)\\)              | \\(O(n + k)\\)                 | \\(O(n^2)\\)                 |\n\n## Explanation:\n\n1. **Counting Sort**:\n\n   - **Best/Average/Worst Case**: \\(O(n + k)\\), where \\(n\\) is the number of elements and \\(k\\) is the range of the input.\n\n2. **Radix Sort**:\n\n   - **Best/Average/Worst Case**: \\(O(nd)\\), where \\(n\\) is the number of elements and \\(d\\) is the number of digits in the largest number. Radix Sort typically uses Counting Sort as a subroutine, hence the complexity depends on the number of digits.\n\n3. **Bucket Sort**:\n   - **Best/Average Case**: \\(O(n + k)\\), where \\(n\\) is the number of elements and \\(k\\) is the number of buckets.\n   - **Worst Case**: \\(O(n^2)\\), which occurs when all elements are placed in a single bucket, leading to a suboptimal performance that is equivalent to using a basic sorting algorithm like insertion sort within that bucket.\n\nThese complexities assume that the auxiliary sorting within the buckets (for Bucket Sort) or the intermediate sorting for digits (for Radix Sort) is efficiently handled, typically by algorithms with linearithmic or better time complexity.\n\n# Dynamic Programming\n\nThe time complexity for finding the Longest Common Subsequence (LCS) using dynamic programming is as follows:\n\n| Algorithm                            | Best Case Time Complexity | Average Case Time Complexity | Worst Case Time Complexity |\n| ------------------------------------ | ------------------------- | ---------------------------- | -------------------------- |\n| **Longest Common Subsequence (LCS)** | \\(O(m . n)\\)              | \\(O(m . n)\\)                 | \\(O(m . n)\\)               |\n\n### Explanation:\n\n- **Best Case, Average Case, and Worst Case**: \\(O(m . n)\\), where \\(m\\) and \\(n\\) are the lengths of the two input sequences.\n\nThe dynamic programming approach to solve the LCS problem involves constructing a 2D table (of size \\(m \\times n\\)) where each cell \\((i, j)\\) contains the length of the LCS of the substrings up to the \\(i\\)-th character of the first sequence and the \\(j\\)-th character of the second sequence. Filling out this table involves iterating over both sequences, leading to a time complexity of \\(O(m \\cdot n)\\).\n",
    "code": "var Component=(()=>{var g=Object.create;var l=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var N=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),f=(r,n)=>{for(var d in n)l(r,d,{get:n[d],enumerable:!0})},h=(r,n,d,i)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let t of m(n))!u.call(r,t)&&t!==d&&l(r,t,{get:()=>n[t],enumerable:!(i=O(n,t))||i.enumerable});return r};var x=(r,n,d)=>(d=r!=null?g(p(r)):{},h(n||!r||!r.__esModule?l(d,\"default\",{value:r,enumerable:!0}):d,r)),w=r=>h(l({},\"__esModule\",{value:!0}),r);var o=N((S,c)=>{c.exports=_jsx_runtime});var b={};f(b,{default:()=>s,frontmatter:()=>C});var e=x(o()),C={title:\"Time Complexity of Algorithms\",date:\"2024-06-27\",tags:[\"Algorithms\",\"Time Complexity\",\"Computational Efficiency\",\"Computer Science\"],summary:\"This article explores time complexity in algorithms, explaining how it measures the efficiency and performance of different algorithms based on input size.\",authors:[\"default\",\"sparrowhawk\"]};function a(r){let n={a:\"a\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",path:\"path\",span:\"span\",strong:\"strong\",svg:\"svg\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...r.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.h1,{className:\"content-header\",id:\"complexity\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#complexity\",tabIndex:\"-1\",children:(0,e.jsx)(e.Fragment,{children:(0,e.jsx)(n.span,{className:\"content-header-link\",children:(0,e.jsxs)(n.svg,{className:\"h-5 linkicon w-5\",fill:\"currentColor\",viewBox:\"0 0 20 20\",xmlns:\"http://www.w3.org/2000/svg\",children:[(0,e.jsx)(n.path,{d:\"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z\"}),(0,e.jsx)(n.path,{d:\"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z\"})]})})})}),\"Complexity\"]}),(0,e.jsxs)(n.h1,{className:\"content-header\",id:\"different-data-structure\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#different-data-structure\",tabIndex:\"-1\",children:(0,e.jsx)(e.Fragment,{children:(0,e.jsx)(n.span,{className:\"content-header-link\",children:(0,e.jsxs)(n.svg,{className:\"h-5 linkicon w-5\",fill:\"currentColor\",viewBox:\"0 0 20 20\",xmlns:\"http://www.w3.org/2000/svg\",children:[(0,e.jsx)(n.path,{d:\"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z\"}),(0,e.jsx)(n.path,{d:\"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z\"})]})})})}),\"Different Data Structure\"]}),(0,e.jsx)(n.p,{children:\"Sure, here is a consolidated table that includes the best case, worst case, and average case time complexities for various operations on different data structures:\"}),(0,e.jsxs)(n.table,{children:[(0,e.jsx)(n.thead,{children:(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.th,{children:\"Data Structure\"}),(0,e.jsx)(n.th,{children:\"Operation\"}),(0,e.jsx)(n.th,{children:\"Best Case\"}),(0,e.jsx)(n.th,{children:\"Worst Case\"}),(0,e.jsx)(n.th,{children:\"Average Case\"})]})}),(0,e.jsxs)(n.tbody,{children:[(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Array\"})}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Access\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Search\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Insertion\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Deletion\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Stack\"})}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Access\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Search\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Insertion\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Deletion\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Queue\"})}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Access\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Search\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Insertion\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Deletion\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Singly Linked List\"})}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Access\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Search\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Insertion\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Deletion\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Doubly Linked List\"})}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Access\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Search\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Insertion\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Deletion\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Hash Table\"})}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Access\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Search\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Insertion\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Deletion\"})}),(0,e.jsx)(n.td,{children:\"O(1)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(1)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsxs)(n.strong,{children:[\"Binary \",(0,e.jsx)(n.strong,{children:\"Search\"}),\" Tree\"]})}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Access\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Search\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Insertion\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Deletion\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"AVL Tree\"})}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Access\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Search\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Insertion\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Deletion\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"B Tree\"})}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Access\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Search\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Insertion\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Deletion\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Red Black Tree\"})}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Access\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Search\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Insertion\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Deletion\"})}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"}),(0,e.jsx)(n.td,{children:\"O(log N)\"})]})]})]}),(0,e.jsxs)(n.h1,{className:\"content-header\",id:\"comparison-sort\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#comparison-sort\",tabIndex:\"-1\",children:(0,e.jsx)(e.Fragment,{children:(0,e.jsx)(n.span,{className:\"content-header-link\",children:(0,e.jsxs)(n.svg,{className:\"h-5 linkicon w-5\",fill:\"currentColor\",viewBox:\"0 0 20 20\",xmlns:\"http://www.w3.org/2000/svg\",children:[(0,e.jsx)(n.path,{d:\"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z\"}),(0,e.jsx)(n.path,{d:\"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z\"})]})})})}),\"Comparison Sort\"]}),(0,e.jsx)(n.p,{children:\"Sure! Here is a table summarizing the time complexities (best case, average case, and worst case) of various algorithms:\"}),(0,e.jsxs)(n.table,{children:[(0,e.jsx)(n.thead,{children:(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.th,{children:\"Algorithm\"}),(0,e.jsx)(n.th,{children:\"Best Case Time Complexity\"}),(0,e.jsx)(n.th,{children:\"Average Case Time Complexity\"}),(0,e.jsx)(n.th,{children:\"Worst Case Time Complexity\"})]})}),(0,e.jsxs)(n.tbody,{children:[(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Selection Sort\"})}),(0,e.jsxs)(n.td,{children:[\"(O(n\",(0,e.jsx)(\"sup\",{children:\"2\"}),\"))\"]}),(0,e.jsxs)(n.td,{children:[\"(O(n\",(0,e.jsx)(\"sup\",{children:\"2\"}),\"))\"]}),(0,e.jsxs)(n.td,{children:[\"(O(n\",(0,e.jsx)(\"sup\",{children:\"2\"}),\"))\"]})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Insertion Sort\"})}),(0,e.jsx)(n.td,{children:\"(O(n))\"}),(0,e.jsxs)(n.td,{children:[\"(O(n\",(0,e.jsx)(\"sup\",{children:\"2\"}),\"))\"]}),(0,e.jsxs)(n.td,{children:[\"(O(n\",(0,e.jsx)(\"sup\",{children:\"2\"}),\"))\"]})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Merge Sort\"})}),(0,e.jsx)(n.td,{children:\"(O(n log n))\"}),(0,e.jsx)(n.td,{children:\"(O(n log n))\"}),(0,e.jsx)(n.td,{children:\"(O(n log n))\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Merge in Merge Sort\"})}),(0,e.jsx)(n.td,{children:\"(O(n))\"}),(0,e.jsx)(n.td,{children:\"(O(n))\"}),(0,e.jsx)(n.td,{children:\"(O(n))\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Quick Sort\"})}),(0,e.jsx)(n.td,{children:\"(O(n log n))\"}),(0,e.jsx)(n.td,{children:\"(O(n log n))\"}),(0,e.jsxs)(n.td,{children:[\"(O(n\",(0,e.jsx)(\"sup\",{children:\"2\"}),\"))\"]})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Partition (Quick Sort)\"})}),(0,e.jsx)(n.td,{children:\"(O(n))\"}),(0,e.jsx)(n.td,{children:\"(O(n))\"}),(0,e.jsx)(n.td,{children:\"(O(n))\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Heap Sort\"})}),(0,e.jsx)(n.td,{children:\"(O(n log n))\"}),(0,e.jsx)(n.td,{children:\"(O(n log n))\"}),(0,e.jsx)(n.td,{children:\"(O(n log n))\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Build Max Heap\"})}),(0,e.jsx)(n.td,{children:\"(O(n))\"}),(0,e.jsx)(n.td,{children:\"(O(n))\"}),(0,e.jsx)(n.td,{children:\"(O(n))\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Heapify\"})}),(0,e.jsx)(n.td,{children:\"(O(log n))\"}),(0,e.jsx)(n.td,{children:\"(O(log n))\"}),(0,e.jsx)(n.td,{children:\"(O(log n))\"})]})]})]}),(0,e.jsxs)(n.h1,{className:\"content-header\",id:\"greedy-algorithms\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#greedy-algorithms\",tabIndex:\"-1\",children:(0,e.jsx)(e.Fragment,{children:(0,e.jsx)(n.span,{className:\"content-header-link\",children:(0,e.jsxs)(n.svg,{className:\"h-5 linkicon w-5\",fill:\"currentColor\",viewBox:\"0 0 20 20\",xmlns:\"http://www.w3.org/2000/svg\",children:[(0,e.jsx)(n.path,{d:\"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z\"}),(0,e.jsx)(n.path,{d:\"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z\"})]})})})}),\"Greedy algorithms\"]}),(0,e.jsxs)(n.table,{children:[(0,e.jsx)(n.thead,{children:(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.th,{children:\"Algorithm\"}),(0,e.jsx)(n.th,{children:\"Best Case Time Complexity\"}),(0,e.jsx)(n.th,{children:\"Average Case Time Complexity\"}),(0,e.jsx)(n.th,{children:\"Worst Case Time Complexity\"})]})}),(0,e.jsxs)(n.tbody,{children:[(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"BFS in Graph\"})}),(0,e.jsx)(n.td,{children:\"(O(V + E))\"}),(0,e.jsx)(n.td,{children:\"(O(V + E))\"}),(0,e.jsx)(n.td,{children:\"(O(V + E))\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"DFS in Graph\"})}),(0,e.jsx)(n.td,{children:\"(O(V + E))\"}),(0,e.jsx)(n.td,{children:\"(O(V + E))\"}),(0,e.jsx)(n.td,{children:\"(O(V + E))\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"N-Queen Problem\"})}),(0,e.jsx)(n.td,{children:\"(O(N!))\"}),(0,e.jsx)(n.td,{children:\"(O(N!))\"}),(0,e.jsx)(n.td,{children:\"(O(N!))\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Kruskal\\u2019s Algorithm\"})}),(0,e.jsx)(n.td,{children:\"(O(E log E))\"}),(0,e.jsx)(n.td,{children:\"(O(E log E))\"}),(0,e.jsx)(n.td,{children:\"(O(E log E))\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Prim\\u2019s Algorithm\"})}),(0,e.jsx)(n.td,{children:\"(O(E log V)) (using binary heap)\"}),(0,e.jsx)(n.td,{children:\"(O(E + V log V)) (using Fibonacci heap)\"}),(0,e.jsx)(n.td,{children:\"(O(E + V log V)) (using Fibonacci heap)\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Dijkstra's Algorithm\"})}),(0,e.jsx)(n.td,{children:\"(O((E + V) log V)) (for sparse )\"}),(0,e.jsxs)(n.td,{children:[\"(O(E + V\",(0,e.jsx)(\"sup\",{children:\"2\"}),\"))\"]}),(0,e.jsxs)(n.td,{children:[\"(O(E + V\",(0,e.jsx)(\"sup\",{children:\"2\"}),\"))\"]})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"0/1 Knapsack\"})}),(0,e.jsxs)(n.td,{children:[\"(O(2\",(0,e.jsx)(\"sup\",{children:\"n\"}),\"))\"]}),(0,e.jsxs)(n.td,{children:[\"(O(2\",(0,e.jsx)(\"sup\",{children:\"n\"}),\"))\"]}),(0,e.jsxs)(n.td,{children:[\"(O(2\",(0,e.jsx)(\"sup\",{children:\"n\"}),\"))\"]})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Fractional Knapsack (greedy)\"})}),(0,e.jsx)(n.td,{children:\"(O(n log n))\"}),(0,e.jsx)(n.td,{children:\"(O(n log n))\"}),(0,e.jsx)(n.td,{children:\"(O(n log n))\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Ford-Fulkerson\"})}),(0,e.jsx)(n.td,{children:\"(O(E f))\"}),(0,e.jsx)(n.td,{children:\"(O(E f))\"}),(0,e.jsx)(n.td,{children:\"(O(E f))\"})]})]})]}),(0,e.jsx)(n.p,{children:\"Here, (n) typically denotes the number of elements or size of the input, (V) denotes the number of vertices in a graph, (E) denotes the number of edges in a graph and (f) is the maximum flow value.\"}),(0,e.jsxs)(n.h1,{className:\"content-header\",id:\"sorting-in-linear-time\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#sorting-in-linear-time\",tabIndex:\"-1\",children:(0,e.jsx)(e.Fragment,{children:(0,e.jsx)(n.span,{className:\"content-header-link\",children:(0,e.jsxs)(n.svg,{className:\"h-5 linkicon w-5\",fill:\"currentColor\",viewBox:\"0 0 20 20\",xmlns:\"http://www.w3.org/2000/svg\",children:[(0,e.jsx)(n.path,{d:\"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z\"}),(0,e.jsx)(n.path,{d:\"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z\"})]})})})}),\"Sorting in linear time\"]}),(0,e.jsx)(n.p,{children:\"Sure! Here are the time complexities for Counting Sort, Radix Sort, and Bucket Sort:\"}),(0,e.jsxs)(n.table,{children:[(0,e.jsx)(n.thead,{children:(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.th,{children:\"Algorithm\"}),(0,e.jsx)(n.th,{children:\"Best Case Time Complexity\"}),(0,e.jsx)(n.th,{children:\"Average Case Time Complexity\"}),(0,e.jsx)(n.th,{children:\"Worst Case Time Complexity\"})]})}),(0,e.jsxs)(n.tbody,{children:[(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Counting Sort\"})}),(0,e.jsx)(n.td,{children:\"(O(n + k))\"}),(0,e.jsx)(n.td,{children:\"(O(n + k))\"}),(0,e.jsx)(n.td,{children:\"(O(n + k))\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Radix Sort\"})}),(0,e.jsx)(n.td,{children:\"(O(nd))\"}),(0,e.jsx)(n.td,{children:\"(O(nd))\"}),(0,e.jsx)(n.td,{children:\"(O(nd))\"})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Bucket Sort\"})}),(0,e.jsx)(n.td,{children:\"(O(n + k))\"}),(0,e.jsx)(n.td,{children:\"(O(n + k))\"}),(0,e.jsx)(n.td,{children:\"(O(n^2))\"})]})]})]}),(0,e.jsxs)(n.h2,{className:\"content-header\",id:\"explanation\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#explanation\",tabIndex:\"-1\",children:(0,e.jsx)(e.Fragment,{children:(0,e.jsx)(n.span,{className:\"content-header-link\",children:(0,e.jsxs)(n.svg,{className:\"h-5 linkicon w-5\",fill:\"currentColor\",viewBox:\"0 0 20 20\",xmlns:\"http://www.w3.org/2000/svg\",children:[(0,e.jsx)(n.path,{d:\"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z\"}),(0,e.jsx)(n.path,{d:\"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z\"})]})})})}),\"Explanation:\"]}),(0,e.jsxs)(n.ol,{children:[(0,e.jsxs)(n.li,{children:[(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Counting Sort\"}),\":\"]}),(0,e.jsx)(n.ul,{children:(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Best/Average/Worst Case\"}),\": (O(n + k)), where (n) is the number of elements and (k) is the range of the input.\"]})})]}),(0,e.jsxs)(n.li,{children:[(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Radix Sort\"}),\":\"]}),(0,e.jsx)(n.ul,{children:(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Best/Average/Worst Case\"}),\": (O(nd)), where (n) is the number of elements and (d) is the number of digits in the largest number. Radix Sort typically uses Counting Sort as a subroutine, hence the complexity depends on the number of digits.\"]})})]}),(0,e.jsxs)(n.li,{children:[(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Bucket Sort\"}),\":\"]}),(0,e.jsxs)(n.ul,{children:[(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Best/Average Case\"}),\": (O(n + k)), where (n) is the number of elements and (k) is the number of buckets.\"]}),(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Worst Case\"}),\": (O(n^2)), which occurs when all elements are placed in a single bucket, leading to a suboptimal performance that is equivalent to using a basic sorting algorithm like insertion sort within that bucket.\"]})]})]})]}),(0,e.jsx)(n.p,{children:\"These complexities assume that the auxiliary sorting within the buckets (for Bucket Sort) or the intermediate sorting for digits (for Radix Sort) is efficiently handled, typically by algorithms with linearithmic or better time complexity.\"}),(0,e.jsxs)(n.h1,{className:\"content-header\",id:\"dynamic-programming\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#dynamic-programming\",tabIndex:\"-1\",children:(0,e.jsx)(e.Fragment,{children:(0,e.jsx)(n.span,{className:\"content-header-link\",children:(0,e.jsxs)(n.svg,{className:\"h-5 linkicon w-5\",fill:\"currentColor\",viewBox:\"0 0 20 20\",xmlns:\"http://www.w3.org/2000/svg\",children:[(0,e.jsx)(n.path,{d:\"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z\"}),(0,e.jsx)(n.path,{d:\"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z\"})]})})})}),\"Dynamic Programming\"]}),(0,e.jsx)(n.p,{children:\"The time complexity for finding the Longest Common Subsequence (LCS) using dynamic programming is as follows:\"}),(0,e.jsxs)(n.table,{children:[(0,e.jsx)(n.thead,{children:(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.th,{children:\"Algorithm\"}),(0,e.jsx)(n.th,{children:\"Best Case Time Complexity\"}),(0,e.jsx)(n.th,{children:\"Average Case Time Complexity\"}),(0,e.jsx)(n.th,{children:\"Worst Case Time Complexity\"})]})}),(0,e.jsx)(n.tbody,{children:(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.strong,{children:\"Longest Common Subsequence (LCS)\"})}),(0,e.jsx)(n.td,{children:\"(O(m . n))\"}),(0,e.jsx)(n.td,{children:\"(O(m . n))\"}),(0,e.jsx)(n.td,{children:\"(O(m . n))\"})]})})]}),(0,e.jsxs)(n.h3,{className:\"content-header\",id:\"explanation-1\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#explanation-1\",tabIndex:\"-1\",children:(0,e.jsx)(e.Fragment,{children:(0,e.jsx)(n.span,{className:\"content-header-link\",children:(0,e.jsxs)(n.svg,{className:\"h-5 linkicon w-5\",fill:\"currentColor\",viewBox:\"0 0 20 20\",xmlns:\"http://www.w3.org/2000/svg\",children:[(0,e.jsx)(n.path,{d:\"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z\"}),(0,e.jsx)(n.path,{d:\"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z\"})]})})})}),\"Explanation:\"]}),(0,e.jsx)(n.ul,{children:(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Best Case, Average Case, and Worst Case\"}),\": (O(m . n)), where (m) and (n) are the lengths of the two input sequences.\"]})}),(0,e.jsx)(n.p,{children:\"The dynamic programming approach to solve the LCS problem involves constructing a 2D table (of size (m \\\\times n)) where each cell ((i, j)) contains the length of the LCS of the substrings up to the (i)-th character of the first sequence and the (j)-th character of the second sequence. Filling out this table involves iterating over both sequences, leading to a time complexity of (O(m \\\\cdot n)).\"})]})}function s(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,{...r,children:(0,e.jsx)(a,{...r})}):a(r)}return w(b);})();\n;return Component;"
  },
  "_id": "blog/Time-complexity.mdx",
  "_raw": {
    "sourceFilePath": "blog/Time-complexity.mdx",
    "sourceFileName": "Time-complexity.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/Time-complexity"
  },
  "type": "Blog",
  "readingTime": {
    "text": "7 min read",
    "minutes": 6.52,
    "time": 391200,
    "words": 1304
  },
  "slug": "Time-complexity",
  "path": "blog/Time-complexity",
  "filePath": "blog/Time-complexity.mdx",
  "toc": [
    {
      "value": "Complexity",
      "url": "#complexity-5",
      "depth": 1
    },
    {
      "value": "Different Data Structure",
      "url": "#different-data-structure-5",
      "depth": 1
    },
    {
      "value": "Comparison Sort",
      "url": "#comparison-sort-5",
      "depth": 1
    },
    {
      "value": "Greedy algorithms",
      "url": "#greedy-algorithms-5",
      "depth": 1
    },
    {
      "value": "Sorting in linear time",
      "url": "#sorting-in-linear-time-5",
      "depth": 1
    },
    {
      "value": "Explanation:",
      "url": "#explanation-10",
      "depth": 2
    },
    {
      "value": "Dynamic Programming",
      "url": "#dynamic-programming-5",
      "depth": 1
    },
    {
      "value": "Explanation:",
      "url": "#explanation-11",
      "depth": 3
    }
  ],
  "structuredData": {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": "Time Complexity of Algorithms",
    "datePublished": "2024-06-27T00:00:00.000Z",
    "dateModified": "2024-06-27T00:00:00.000Z",
    "description": "This article explores time complexity in algorithms, explaining how it measures the efficiency and performance of different algorithms based on input size.",
    "image": "/static/images/twitter-card.png",
    "url": "https://tailwind-nextjs-starter-blog.vercel.app/blog/Time-complexity"
  }
}